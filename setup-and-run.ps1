# ASM-Studio Pro - Complete Setup and Run Script
# This script will set up and start the entire project

[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

param(
    [switch]$Docker,
    [switch]$Dev,
    [switch]$Help
)

function Show-Help {
    Write-Host ""
    Write-Host "ASM-Studio Pro - Setup and Run Script" -ForegroundColor Cyan
    Write-Host "======================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "Usage:" -ForegroundColor Yellow
    Write-Host "  .\setup-and-run.ps1 -Dev     # Run in development mode (recommended)"
    Write-Host "  .\setup-and-run.ps1 -Docker  # Run everything in Docker"
    Write-Host "  .\setup-and-run.ps1 -Help    # Show this help"
    Write-Host ""
    Write-Host "Development Mode:" -ForegroundColor Yellow
    Write-Host "  - MongoDB and Redis in Docker"
    Write-Host "  - Backend and Frontend run locally with hot-reload"
    Write-Host ""
    Write-Host "Docker Mode:" -ForegroundColor Yellow
    Write-Host "  - Everything runs in Docker containers"
    Write-Host "  - Production-like environment"
    Write-Host ""
    exit
}

if ($Help) {
    Show-Help
}

Write-Host ""
Write-Host "üöÄ ASM-Studio Pro Setup" -ForegroundColor Cyan
Write-Host "========================" -ForegroundColor Cyan
Write-Host ""

# Check Docker
Write-Host "üì¶ Checking Docker..." -ForegroundColor Yellow
try {
    docker ps | Out-Null
    Write-Host "‚úÖ Docker is running" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker is not running. Please start Docker Desktop." -ForegroundColor Red
    exit 1
}

# Check if .env exists
Write-Host ""
Write-Host "üîë Checking environment files..." -ForegroundColor Yellow

if (-not (Test-Path ".env")) {
    Write-Host "‚ö†Ô∏è  Root .env file not found. Creating from example..." -ForegroundColor Yellow
    if (Test-Path ".env.example") {
        Copy-Item ".env.example" ".env"
        Write-Host "‚ö†Ô∏è  Please edit .env and add your GEMINI_API_KEY" -ForegroundColor Yellow
        Write-Host "   Get your key from: https://makersuite.google.com/app/apikey" -ForegroundColor Cyan
        notepad .env
    }
}

if (-not (Test-Path "backend\.env")) {
    Write-Host "‚ö†Ô∏è  Backend .env file not found. Creating from example..." -ForegroundColor Yellow
    if (Test-Path "backend\.env.example") {
        Copy-Item "backend\.env.example" "backend\.env"
    }
}

if (-not (Test-Path "ai-engine\.env")) {
    Write-Host "‚ö†Ô∏è  AI Engine .env file not found. Creating from example..." -ForegroundColor Yellow
    if (Test-Path "ai-engine\.env.example") {
        Copy-Item "ai-engine\.env.example" "ai-engine\.env"
    }
}

Write-Host "‚úÖ Environment files ready" -ForegroundColor Green

# Check Node.js
Write-Host ""
Write-Host "üì¶ Checking Node.js..." -ForegroundColor Yellow
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js $nodeVersion installed" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js is not installed. Please install Node.js 18+" -ForegroundColor Red
    exit 1
}

if ($Docker) {
    # Docker Mode
    Write-Host ""
    Write-Host "üê≥ Starting in Docker Mode..." -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "üì¶ Building Docker images..." -ForegroundColor Yellow
    docker-compose build
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Docker images built successfully" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Docker build failed" -ForegroundColor Red
        exit 1
    }
    
    Write-Host ""
    Write-Host "üöÄ Starting all services..." -ForegroundColor Yellow
    docker-compose up -d
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ All services started" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Failed to start services" -ForegroundColor Red
        exit 1
    }
    
    Write-Host ""
    Write-Host "üìä Service Status:" -ForegroundColor Cyan
    docker-compose ps
    
    Write-Host ""
    Write-Host "üåê Application URLs:" -ForegroundColor Cyan
    Write-Host "   Frontend:    http://localhost" -ForegroundColor White
    Write-Host "   Backend:     http://localhost:3001" -ForegroundColor White
    Write-Host "   Health:      http://localhost:3001/health" -ForegroundColor White
    Write-Host ""
    Write-Host "üìù View logs:" -ForegroundColor Yellow
    Write-Host "   docker-compose logs -f" -ForegroundColor White
    Write-Host ""
    Write-Host "üõë Stop services:" -ForegroundColor Yellow
    Write-Host "   docker-compose down" -ForegroundColor White
    Write-Host ""
    
} elseif ($Dev) {
    # Development Mode
    Write-Host ""
    Write-Host "üíª Starting in Development Mode..." -ForegroundColor Cyan
    Write-Host ""
    
    # Check if node_modules exist
    $needsInstall = $false
    
    if (-not (Test-Path "backend\node_modules")) {
        Write-Host "üì¶ Installing backend dependencies..." -ForegroundColor Yellow
        Push-Location backend
        npm install
        Pop-Location
        $needsInstall = $true
    }
    
    if (-not (Test-Path "frontend\node_modules")) {
        Write-Host "üì¶ Installing frontend dependencies..." -ForegroundColor Yellow
        Push-Location frontend
        npm install
        Pop-Location
        $needsInstall = $true
    }
    
    if (-not (Test-Path "ai-engine\node_modules")) {
        Write-Host "üì¶ Installing AI engine dependencies..." -ForegroundColor Yellow
        Push-Location ai-engine
        npm install
        Pop-Location
        $needsInstall = $true
    }
    
    if ($needsInstall) {
        Write-Host "‚úÖ Dependencies installed" -ForegroundColor Green
    }
    
    Write-Host ""
    Write-Host "üóÑÔ∏è  Starting MongoDB and Redis..." -ForegroundColor Yellow
    docker-compose up mongodb redis -d
    
    Start-Sleep -Seconds 3
    
    $mongoRunning = docker ps --filter "name=asmstudio-mongodb" --filter "status=running" -q
    $redisRunning = docker ps --filter "name=asmstudio-redis" --filter "status=running" -q
    
    if ($mongoRunning -and $redisRunning) {
        Write-Host "‚úÖ MongoDB and Redis are running" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Failed to start MongoDB or Redis" -ForegroundColor Red
        exit 1
    }
    
    Write-Host ""
    Write-Host "üìù Connection Information:" -ForegroundColor Cyan
    Write-Host "   MongoDB: mongodb://admin:changeme@localhost:27017/asmstudio?authSource=admin" -ForegroundColor White
    Write-Host "   Redis:   redis://localhost:6379" -ForegroundColor White
    Write-Host ""
    Write-Host "üéØ Next Steps:" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "1Ô∏è‚É£  Open a new terminal and run:" -ForegroundColor Yellow
    Write-Host "   cd backend" -ForegroundColor White
    Write-Host "   npm run dev" -ForegroundColor White
    Write-Host ""
    Write-Host "2Ô∏è‚É£  Open another terminal and run:" -ForegroundColor Yellow
    Write-Host "   cd frontend" -ForegroundColor White
    Write-Host "   npm run dev" -ForegroundColor White
    Write-Host ""
    Write-Host "üåê Application URLs:" -ForegroundColor Cyan
    Write-Host "   Frontend:    http://localhost:3000" -ForegroundColor White
    Write-Host "   Backend:     http://localhost:3001" -ForegroundColor White
    Write-Host "   Health:      http://localhost:3001/health" -ForegroundColor White
    Write-Host ""
    Write-Host "üõë To stop MongoDB and Redis:" -ForegroundColor Yellow
    Write-Host "   docker-compose down" -ForegroundColor White
    Write-Host ""
    
} else {
    Show-Help
}

Write-Host "‚ú® Setup complete!" -ForegroundColor Green
Write-Host ""
